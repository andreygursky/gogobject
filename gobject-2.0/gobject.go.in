package gobject

/*
[<.CommonIncludes>]

[<.GType>]


[<.CUtils>]
[<.CForwardDeclarations>]

[<.GFree>]

#include "gobject.h"

extern uint32_t g_quark_from_string(const char*);
extern void g_object_set_qdata(GObject*, uint32_t, void*);

extern void g_type_init();
extern void g_value_take_object(GValue*, void*);

extern GParamSpec *g_param_spec_ref_sink(GParamSpec*);
extern void g_param_spec_unref(GParamSpec*);

#cgo pkg-config: gobject-2.0
*/
import "C"
import "unsafe"
import "runtime"
import "reflect"

[<.GoUtils>]

[<.GoBindings>]

//--------------------------------------------------------------
// NilString
//--------------------------------------------------------------

// its value will stay the same forever, use the value directly if you like
const NilString = "\x00"

//--------------------------------------------------------------
// Quark
//
// TODO: probably it's a temporary place for this, quarks are
// from glib
//--------------------------------------------------------------

type Quark uint32

func NewQuarkFromString(s string) Quark {
	cs := C.CString(s)
	quark := C.g_quark_from_string(cs)
	C.free(unsafe.Pointer(cs))
	return Quark(quark)
}

// we use this one to store Go's representation of the GObject
// as user data in that GObject once it was allocated. For the
// sake of avoiding allocations.
var go_repr Quark

func init() {
	go_repr = NewQuarkFromString("go-representation")
}

//--------------------------------------------------------------
// ParamSpec utils
//--------------------------------------------------------------

// Let's implement these manually (not Object based and small amount of things
// to implement).

// First some utils
func param_spec_finalizer(pspec *ParamSpec) {
	C.g_param_spec_unref((*C.GParamSpec)(pspec.C))
}

func set_param_spec_finalizer(pspec *ParamSpec) {
	runtime.SetFinalizer(pspec, param_spec_finalizer)
}

func ParamSpecGrabIfType(c unsafe.Pointer, t Type) unsafe.Pointer {
	if c == nil {
		return nil
	}
	obj := &ParamSpec{c}
	if obj.GetType().IsA(t) {
		C.g_param_spec_ref_sink((*C.GParamSpec)(obj.C))
		set_param_spec_finalizer(obj)
		return unsafe.Pointer(obj)
	}
	return nil
}

func ParamSpecWrap(c unsafe.Pointer, grab bool) unsafe.Pointer {
	if c == nil {
		return nil
	}
	obj := &ParamSpec{c}
	if grab {
		C.g_param_spec_ref_sink((*C.GParamSpec)(obj.C))
	}
	set_param_spec_finalizer(obj)
	return unsafe.Pointer(obj)
}

//--------------------------------------------------------------
// ParamSpec
//--------------------------------------------------------------

type ParamSpecLike interface {
	InheritedFromGParamSpec() *C.GParamSpec
}

type ParamSpec struct {
	C unsafe.Pointer
}

func ToParamSpec(pspeclike ParamSpecLike) *ParamSpec {
	t := (*ParamSpec)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpec()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpec)(obj)
	}
	panic("cannot cast to ParamSpec")
}

func (this *ParamSpec) InheritedFromGParamSpec() *C.GParamSpec {
	return (*C.GParamSpec)(this.C)
}

func (this *ParamSpec) GetStaticType() Type {
	return Type(C._g_type_param())
}

func (this *ParamSpec) GetType() Type {
	return Type(C._g_param_spec_type(this.InheritedFromGParamSpec()))
}

func (this *ParamSpec) GetValueType() Type {
	return Type(C._g_param_spec_value_type(this.InheritedFromGParamSpec()))
}

//--------------------------------------------------------------
// ParamSpecBoolean
//--------------------------------------------------------------

type ParamSpecBooleanLike interface {
	InheritedFromGParamSpecBoolean() *C.GParamSpecBoolean
}

type ParamSpecBoolean struct {
	ParamSpec
}

func ToParamSpecBoolean(pspeclike ParamSpecBooleanLike) *ParamSpecBoolean {
	t := (*ParamSpecBoolean)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecBoolean()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecBoolean)(obj)
	}
	panic("cannot cast to ParamSpecBoolean")
}

func (this *ParamSpecBoolean) InheritedFromGParamSpecBoolean() *C.GParamSpecBoolean {
	return (*C.GParamSpecBoolean)(this.C)
}

func (this *ParamSpecBoolean) GetStaticType() Type {
	return Type(C._g_type_param_boolean())
}

//--------------------------------------------------------------
// ParamSpecBoxed
//--------------------------------------------------------------

type ParamSpecBoxedLike interface {
	InheritedFromGParamSpecBoxed() *C.GParamSpecBoxed
}

type ParamSpecBoxed struct {
	ParamSpec
}

func ToParamSpecBoxed(pspeclike ParamSpecBoxedLike) *ParamSpecBoxed {
	t := (*ParamSpecBoxed)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecBoxed()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecBoxed)(obj)
	}
	panic("cannot cast to ParamSpecBoxed")
}

func (this *ParamSpecBoxed) InheritedFromGParamSpecBoxed() *C.GParamSpecBoxed {
	return (*C.GParamSpecBoxed)(this.C)
}

func (this *ParamSpecBoxed) GetStaticType() Type {
	return Type(C._g_type_param_boxed())
}

//--------------------------------------------------------------
// ParamSpecChar
//--------------------------------------------------------------

type ParamSpecCharLike interface {
	InheritedFromGParamSpecChar() *C.GParamSpecChar
}

type ParamSpecChar struct {
	ParamSpec
}

func ToParamSpecChar(pspeclike ParamSpecCharLike) *ParamSpecChar {
	t := (*ParamSpecChar)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecChar()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecChar)(obj)
	}
	panic("cannot cast to ParamSpecChar")
}

func (this *ParamSpecChar) InheritedFromGParamSpecChar() *C.GParamSpecChar {
	return (*C.GParamSpecChar)(this.C)
}

func (this *ParamSpecChar) GetStaticType() Type {
	return Type(C._g_type_param_char())
}

//--------------------------------------------------------------
// ParamSpecDouble
//--------------------------------------------------------------

type ParamSpecDoubleLike interface {
	InheritedFromGParamSpecDouble() *C.GParamSpecDouble
}

type ParamSpecDouble struct {
	ParamSpec
}

func ToParamSpecDouble(pspeclike ParamSpecDoubleLike) *ParamSpecDouble {
	t := (*ParamSpecDouble)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecDouble()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecDouble)(obj)
	}
	panic("cannot cast to ParamSpecDouble")
}

func (this *ParamSpecDouble) InheritedFromGParamSpecDouble() *C.GParamSpecDouble {
	return (*C.GParamSpecDouble)(this.C)
}

func (this *ParamSpecDouble) GetStaticType() Type {
	return Type(C._g_type_param_double())
}

//--------------------------------------------------------------
// ParamSpecEnum
//--------------------------------------------------------------

type ParamSpecEnumLike interface {
	InheritedFromGParamSpecEnum() *C.GParamSpecEnum
}

type ParamSpecEnum struct {
	ParamSpec
}

func ToParamSpecEnum(pspeclike ParamSpecEnumLike) *ParamSpecEnum {
	t := (*ParamSpecEnum)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecEnum()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecEnum)(obj)
	}
	panic("cannot cast to ParamSpecEnum")
}

func (this *ParamSpecEnum) InheritedFromGParamSpecEnum() *C.GParamSpecEnum {
	return (*C.GParamSpecEnum)(this.C)
}

func (this *ParamSpecEnum) GetStaticType() Type {
	return Type(C._g_type_param_enum())
}

//--------------------------------------------------------------
// ParamSpecFlags
//--------------------------------------------------------------

type ParamSpecFlagsLike interface {
	InheritedFromGParamSpecFlags() *C.GParamSpecFlags
}

type ParamSpecFlags struct {
	ParamSpec
}

func ToParamSpecFlags(pspeclike ParamSpecFlagsLike) *ParamSpecFlags {
	t := (*ParamSpecFlags)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecFlags()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecFlags)(obj)
	}
	panic("cannot cast to ParamSpecFlags")
}

func (this *ParamSpecFlags) InheritedFromGParamSpecFlags() *C.GParamSpecFlags {
	return (*C.GParamSpecFlags)(this.C)
}

func (this *ParamSpecFlags) GetStaticType() Type {
	return Type(C._g_type_param_flags())
}

//--------------------------------------------------------------
// ParamSpecFloat
//--------------------------------------------------------------

type ParamSpecFloatLike interface {
	InheritedFromGParamSpecFloat() *C.GParamSpecFloat
}

type ParamSpecFloat struct {
	ParamSpec
}

func ToParamSpecFloat(pspeclike ParamSpecFloatLike) *ParamSpecFloat {
	t := (*ParamSpecFloat)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecFloat()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecFloat)(obj)
	}
	panic("cannot cast to ParamSpecFloat")
}

func (this *ParamSpecFloat) InheritedFromGParamSpecFloat() *C.GParamSpecFloat {
	return (*C.GParamSpecFloat)(this.C)
}

func (this *ParamSpecFloat) GetStaticType() Type {
	return Type(C._g_type_param_float())
}

//--------------------------------------------------------------
// ParamSpecGType
//--------------------------------------------------------------

type ParamSpecGTypeLike interface {
	InheritedFromGParamSpecGType() *C.GParamSpecGType
}

type ParamSpecGType struct {
	ParamSpec
}

func ToParamSpecGType(pspeclike ParamSpecGTypeLike) *ParamSpecGType {
	t := (*ParamSpecGType)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecGType()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecGType)(obj)
	}
	panic("cannot cast to ParamSpecGType")
}

func (this *ParamSpecGType) InheritedFromGParamSpecGType() *C.GParamSpecGType {
	return (*C.GParamSpecGType)(this.C)
}

func (this *ParamSpecGType) GetStaticType() Type {
	return Type(C._g_type_param_gtype())
}

//--------------------------------------------------------------
// ParamSpecInt
//--------------------------------------------------------------

type ParamSpecIntLike interface {
	InheritedFromGParamSpecInt() *C.GParamSpecInt
}

type ParamSpecInt struct {
	ParamSpec
}

func ToParamSpecInt(pspeclike ParamSpecIntLike) *ParamSpecInt {
	t := (*ParamSpecInt)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecInt()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecInt)(obj)
	}
	panic("cannot cast to ParamSpecInt")
}

func (this *ParamSpecInt) InheritedFromGParamSpecInt() *C.GParamSpecInt {
	return (*C.GParamSpecInt)(this.C)
}

func (this *ParamSpecInt) GetStaticType() Type {
	return Type(C._g_type_param_int())
}

//--------------------------------------------------------------
// ParamSpecInt64
//--------------------------------------------------------------

type ParamSpecInt64Like interface {
	InheritedFromGParamSpecInt64() *C.GParamSpecInt64
}

type ParamSpecInt64 struct {
	ParamSpec
}

func ToParamSpecInt64(pspeclike ParamSpecInt64Like) *ParamSpecInt64 {
	t := (*ParamSpecInt64)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecInt64()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecInt64)(obj)
	}
	panic("cannot cast to ParamSpecInt64")
}

func (this *ParamSpecInt64) InheritedFromGParamSpecInt64() *C.GParamSpecInt64 {
	return (*C.GParamSpecInt64)(this.C)
}

func (this *ParamSpecInt64) GetStaticType() Type {
	return Type(C._g_type_param_int64())
}

//--------------------------------------------------------------
// ParamSpecLong
//--------------------------------------------------------------

type ParamSpecLongLike interface {
	InheritedFromGParamSpecLong() *C.GParamSpecLong
}

type ParamSpecLong struct {
	ParamSpec
}

func ToParamSpecLong(pspeclike ParamSpecLongLike) *ParamSpecLong {
	t := (*ParamSpecLong)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecLong()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecLong)(obj)
	}
	panic("cannot cast to ParamSpecLong")
}

func (this *ParamSpecLong) InheritedFromGParamSpecLong() *C.GParamSpecLong {
	return (*C.GParamSpecLong)(this.C)
}

func (this *ParamSpecLong) GetStaticType() Type {
	return Type(C._g_type_param_long())
}

//--------------------------------------------------------------
// ParamSpecObject
//--------------------------------------------------------------

type ParamSpecObjectLike interface {
	InheritedFromGParamSpecObject() *C.GParamSpecObject
}

type ParamSpecObject struct {
	ParamSpec
}

func ToParamSpecObject(pspeclike ParamSpecObjectLike) *ParamSpecObject {
	t := (*ParamSpecObject)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecObject()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecObject)(obj)
	}
	panic("cannot cast to ParamSpecObject")
}

func (this *ParamSpecObject) InheritedFromGParamSpecObject() *C.GParamSpecObject {
	return (*C.GParamSpecObject)(this.C)
}

func (this *ParamSpecObject) GetStaticType() Type {
	return Type(C._g_type_param_object())
}

//--------------------------------------------------------------
// ParamSpecOverride
//--------------------------------------------------------------

type ParamSpecOverrideLike interface {
	InheritedFromGParamSpecOverride() *C.GParamSpecOverride
}

type ParamSpecOverride struct {
	ParamSpec
}

func ToParamSpecOverride(pspeclike ParamSpecOverrideLike) *ParamSpecOverride {
	t := (*ParamSpecOverride)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecOverride()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecOverride)(obj)
	}
	panic("cannot cast to ParamSpecOverride")
}

func (this *ParamSpecOverride) InheritedFromGParamSpecOverride() *C.GParamSpecOverride {
	return (*C.GParamSpecOverride)(this.C)
}

func (this *ParamSpecOverride) GetStaticType() Type {
	return Type(C._g_type_param_override())
}

//--------------------------------------------------------------
// ParamSpecParam
//--------------------------------------------------------------

type ParamSpecParamLike interface {
	InheritedFromGParamSpecParam() *C.GParamSpecParam
}

type ParamSpecParam struct {
	ParamSpec
}

func ToParamSpecParam(pspeclike ParamSpecParamLike) *ParamSpecParam {
	t := (*ParamSpecParam)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecParam()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecParam)(obj)
	}
	panic("cannot cast to ParamSpecParam")
}

func (this *ParamSpecParam) InheritedFromGParamSpecParam() *C.GParamSpecParam {
	return (*C.GParamSpecParam)(this.C)
}

func (this *ParamSpecParam) GetStaticType() Type {
	return Type(C._g_type_param_param())
}

//--------------------------------------------------------------
// ParamSpecPointer
//--------------------------------------------------------------

type ParamSpecPointerLike interface {
	InheritedFromGParamSpecPointer() *C.GParamSpecPointer
}

type ParamSpecPointer struct {
	ParamSpec
}

func ToParamSpecPointer(pspeclike ParamSpecPointerLike) *ParamSpecPointer {
	t := (*ParamSpecPointer)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecPointer()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecPointer)(obj)
	}
	panic("cannot cast to ParamSpecPointer")
}

func (this *ParamSpecPointer) InheritedFromGParamSpecPointer() *C.GParamSpecPointer {
	return (*C.GParamSpecPointer)(this.C)
}

func (this *ParamSpecPointer) GetStaticType() Type {
	return Type(C._g_type_param_pointer())
}

//--------------------------------------------------------------
// ParamSpecString
//--------------------------------------------------------------

type ParamSpecStringLike interface {
	InheritedFromGParamSpecString() *C.GParamSpecString
}

type ParamSpecString struct {
	ParamSpec
}

func ToParamSpecString(pspeclike ParamSpecStringLike) *ParamSpecString {
	t := (*ParamSpecString)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecString()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecString)(obj)
	}
	panic("cannot cast to ParamSpecString")
}

func (this *ParamSpecString) InheritedFromGParamSpecString() *C.GParamSpecString {
	return (*C.GParamSpecString)(this.C)
}

func (this *ParamSpecString) GetStaticType() Type {
	return Type(C._g_type_param_string())
}

//--------------------------------------------------------------
// ParamSpecUChar
//--------------------------------------------------------------

type ParamSpecUCharLike interface {
	InheritedFromGParamSpecUChar() *C.GParamSpecUChar
}

type ParamSpecUChar struct {
	ParamSpec
}

func ToParamSpecUChar(pspeclike ParamSpecUCharLike) *ParamSpecUChar {
	t := (*ParamSpecUChar)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecUChar()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecUChar)(obj)
	}
	panic("cannot cast to ParamSpecUChar")
}

func (this *ParamSpecUChar) InheritedFromGParamSpecUChar() *C.GParamSpecUChar {
	return (*C.GParamSpecUChar)(this.C)
}

func (this *ParamSpecUChar) GetStaticType() Type {
	return Type(C._g_type_param_uchar())
}

//--------------------------------------------------------------
// ParamSpecUInt
//--------------------------------------------------------------

type ParamSpecUIntLike interface {
	InheritedFromGParamSpecUInt() *C.GParamSpecUInt
}

type ParamSpecUInt struct {
	ParamSpec
}

func ToParamSpecUInt(pspeclike ParamSpecUIntLike) *ParamSpecUInt {
	t := (*ParamSpecUInt)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecUInt()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecUInt)(obj)
	}
	panic("cannot cast to ParamSpecUInt")
}

func (this *ParamSpecUInt) InheritedFromGParamSpecUInt() *C.GParamSpecUInt {
	return (*C.GParamSpecUInt)(this.C)
}

func (this *ParamSpecUInt) GetStaticType() Type {
	return Type(C._g_type_param_uint())
}

//--------------------------------------------------------------
// ParamSpecUInt64
//--------------------------------------------------------------

type ParamSpecUInt64Like interface {
	InheritedFromGParamSpecUInt64() *C.GParamSpecUInt64
}

type ParamSpecUInt64 struct {
	ParamSpec
}

func ToParamSpecUInt64(pspeclike ParamSpecUInt64Like) *ParamSpecUInt64 {
	t := (*ParamSpecUInt64)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecUInt64()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecUInt64)(obj)
	}
	panic("cannot cast to ParamSpecUInt64")
}

func (this *ParamSpecUInt64) InheritedFromGParamSpecUInt64() *C.GParamSpecUInt64 {
	return (*C.GParamSpecUInt64)(this.C)
}

func (this *ParamSpecUInt64) GetStaticType() Type {
	return Type(C._g_type_param_uint64())
}

//--------------------------------------------------------------
// ParamSpecULong
//--------------------------------------------------------------

type ParamSpecULongLike interface {
	InheritedFromGParamSpecULong() *C.GParamSpecULong
}

type ParamSpecULong struct {
	ParamSpec
}

func ToParamSpecULong(pspeclike ParamSpecULongLike) *ParamSpecULong {
	t := (*ParamSpecULong)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecULong()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecULong)(obj)
	}
	panic("cannot cast to ParamSpecULong")
}

func (this *ParamSpecULong) InheritedFromGParamSpecULong() *C.GParamSpecULong {
	return (*C.GParamSpecULong)(this.C)
}

func (this *ParamSpecULong) GetStaticType() Type {
	return Type(C._g_type_param_ulong())
}

//--------------------------------------------------------------
// ParamSpecUnichar
//--------------------------------------------------------------

type ParamSpecUnicharLike interface {
	InheritedFromGParamSpecUnichar() *C.GParamSpecUnichar
}

type ParamSpecUnichar struct {
	ParamSpec
}

func ToParamSpecUnichar(pspeclike ParamSpecUnicharLike) *ParamSpecUnichar {
	t := (*ParamSpecUnichar)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecUnichar()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecUnichar)(obj)
	}
	panic("cannot cast to ParamSpecUnichar")
}

func (this *ParamSpecUnichar) InheritedFromGParamSpecUnichar() *C.GParamSpecUnichar {
	return (*C.GParamSpecUnichar)(this.C)
}

func (this *ParamSpecUnichar) GetStaticType() Type {
	return Type(C._g_type_param_unichar())
}

//--------------------------------------------------------------
// ParamSpecValueArray
//--------------------------------------------------------------

type ParamSpecValueArrayLike interface {
	InheritedFromGParamSpecValueArray() *C.GParamSpecValueArray
}

type ParamSpecValueArray struct {
	ParamSpec
}

func ToParamSpecValueArray(pspeclike ParamSpecValueArrayLike) *ParamSpecValueArray {
	t := (*ParamSpecValueArray)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecValueArray()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecValueArray)(obj)
	}
	panic("cannot cast to ParamSpecValueArray")
}

func (this *ParamSpecValueArray) InheritedFromGParamSpecValueArray() *C.GParamSpecValueArray {
	return (*C.GParamSpecValueArray)(this.C)
}

func (this *ParamSpecValueArray) GetStaticType() Type {
	return Type(C._g_type_param_value_array())
}

//--------------------------------------------------------------
// ParamSpecVariant
//--------------------------------------------------------------

type ParamSpecVariantLike interface {
	InheritedFromGParamSpecVariant() *C.GParamSpecVariant
}

type ParamSpecVariant struct {
	ParamSpec
}

func ToParamSpecVariant(pspeclike ParamSpecVariantLike) *ParamSpecVariant {
	t := (*ParamSpecVariant)(nil).GetStaticType()
	c := pspeclike.InheritedFromGParamSpecVariant()
	obj := ParamSpecGrabIfType(unsafe.Pointer(c), t)
	if obj != nil {
		return (*ParamSpecVariant)(obj)
	}
	panic("cannot cast to ParamSpecVariant")
}

func (this *ParamSpecVariant) InheritedFromGParamSpecVariant() *C.GParamSpecVariant {
	return (*C.GParamSpecVariant)(this.C)
}

func (this *ParamSpecVariant) GetStaticType() Type {
	return Type(C._g_type_param_variant())
}

//--------------------------------------------------------------
// Object
//--------------------------------------------------------------

func object_finalizer(obj *Object) {
	C.g_object_set_qdata((*C.GObject)(obj.C), C.uint32_t(go_repr), nil)
	C.g_object_unref((*C.GObject)(obj.C))
}

func set_object_finalizer(obj *Object) {
	runtime.SetFinalizer(obj, object_finalizer)
}

func ObjectWrap(c unsafe.Pointer, grab bool) unsafe.Pointer {
	if c == nil {
		return nil
	}
	obj := (*Object)(C.g_object_get_qdata((*C.GObject)(c), C.uint32_t(go_repr)))
	if obj != nil {
		return unsafe.Pointer(obj)
	}
	obj = &Object{c}
	if grab {
		C.g_object_ref_sink((*C.GObject)(obj.C))
	}
	set_object_finalizer(obj)
	C.g_object_set_qdata((*C.GObject)(obj.C),
		C.uint32_t(go_repr), unsafe.Pointer(obj))
	return unsafe.Pointer(obj)
}

func ObjectGrabIfType(c unsafe.Pointer, t Type) unsafe.Pointer {
	if c == nil {
		return nil
	}
	hasrepr := true
	obj := (*Object)(C.g_object_get_qdata((*C.GObject)(c), C.uint32_t(go_repr)))
	if obj == nil {
		obj = &Object{c}
		hasrepr = false
	}
	if obj.GetType().IsA(t) {
		if !hasrepr {
			C.g_object_ref_sink((*C.GObject)(obj.C))
			set_object_finalizer(obj)
			C.g_object_set_qdata((*C.GObject)(obj.C),
				C.uint32_t(go_repr), unsafe.Pointer(obj))
		}
		return unsafe.Pointer(obj)
	}
	return nil
}

func (this *Object) GetType() Type {
	return Type(C._g_object_type((*C.GObject)(this.C)))
}

func (this *Object) Connect(signal string, clo interface{}) {
	csignal := C.CString(signal)
	id := nextClosureID()
	ccache.closures[id] = clo
	goclosure := C.g_goclosure_new(C.int32_t(id), _GoInterfaceToCInterface(clo))
	C.g_signal_connect_closure(this.C, csignal, (*C.GClosure)(unsafe.Pointer(goclosure)), 0)
	C.free(unsafe.Pointer(csignal))
}

func (this *Object) FindProperty(name string) *ParamSpec {
	cname := C.CString(name)
	ret := C._g_object_find_property(this.InheritedFromGObject(), cname)
	C.free(unsafe.Pointer(cname))
	return (*ParamSpec)(ParamSpecWrap(unsafe.Pointer(ret), true))
}

func (this *Object) SetProperty(name string, value interface{}) {
	cname := C.CString(name)
	pspec := this.FindProperty(name)
	if pspec == nil {
		panic("Object has no property with that name: " + name)
	}
	var gvalue Value
	gvalue.Init(pspec.GetValueType())
	gvalue.SetGoInterface(value)
	C.g_object_set_property(this.InheritedFromGObject(), cname,
		(*C.GValue)(unsafe.Pointer(&gvalue)))
	gvalue.Unset()
	C.free(unsafe.Pointer(cname))
}

func (this *Object) GetProperty(name string, value interface{}) {
	cname := C.CString(name)
	pspec := this.FindProperty(name)
	if pspec == nil {
		panic("Object has no property with that name: " + name)
	}
	var gvalue Value
	gvalue.Init(pspec.GetValueType())
	C.g_object_get_property(this.InheritedFromGObject(), cname,
		(*C.GValue)(unsafe.Pointer(&gvalue)))
	gvalue.GetGoInterface(value)
	gvalue.Unset()
	C.free(unsafe.Pointer(cname))
}

// closure cache
var ccache = struct {
	values   []reflect.Value
	closures map[int32]interface{}
	id       int32
}{
	make([]reflect.Value, 0, 10),
	make(map[int32]interface{}),
	0,
}

func nextClosureID() int32 {
	id := ccache.id
	ccache.id++
	return id
}

//export g_goclosure_finalize_go
func g_goclosure_finalize_go(goclosure_up unsafe.Pointer) {
	goclosure := (*C.GGoClosure)(goclosure_up)
	delete(ccache.closures, int32(C.g_goclosure_get_id(goclosure)))
}

//export g_goclosure_marshal_go
func g_goclosure_marshal_go(goclosure_up, ret_up unsafe.Pointer, nargs int32, args_up unsafe.Pointer) {
	goclosure := (*C.GGoClosure)(goclosure_up)
	ret := (*Value)(ret_up)
	args := (*(*[alot]Value)(args_up))[:nargs]

	var iface [2]unsafe.Pointer
	C.g_goclosure_get_iface(goclosure, (*unsafe.Pointer)(unsafe.Pointer(&iface)))
	f := reflect.ValueOf(_CInterfaceToGoInterface(iface))
	ft := f.Type()

	ccache.values = ccache.values[:0]
	for i, n := 0, ft.NumIn(); i < n; i++ {
		in := ft.In(i)

		// use default value, if there is not enough args
		if len(args) <= i {
			ccache.values = append(ccache.values, reflect.New(in).Elem())
			continue
		}

		v := args[i].GetGoValue(in)
		ccache.values = append(ccache.values, v)
	}

	out := f.Call(ccache.values)
	if len(out) == 1 {
		ret.SetGoValue(out[0])
	}
}

//--------------------------------------------------------------
// Go Interface boxed type
//--------------------------------------------------------------

var _boxedcache = make(map[unsafe.Pointer]int)

//export g_go_interface_copy_go
func g_go_interface_copy_go(boxed unsafe.Pointer) unsafe.Pointer {
	count, ok := _boxedcache[boxed]
	if !ok {
		panic("Trying to copy a boxed type that is not in the cache")
	}

	_boxedcache[boxed] = count + 1
	return boxed
}

//export g_go_interface_free_go
func g_go_interface_free_go(boxed unsafe.Pointer) {
	count, ok := _boxedcache[boxed]
	if !ok {
		panic("Trying to delete a boxed type that is not in the cache")
	}

	if count == 1 {
		delete(_boxedcache, boxed)
	} else {
		_boxedcache[boxed] = count - 1
	}
}

//--------------------------------------------------------------
// Type
//--------------------------------------------------------------

type Type C.GType

func (this Type) IsA(other Type) bool {
	return C.g_type_is_a(C.GType(this), C.GType(other)) != 0
}

func (this Type) String() string {
	cname := C.g_type_name(C.GType(this))
	if cname == nil {
		return ""
	}
	return C.GoString(cname)
}

func (this Type) asC() C.GType {
	return C.GType(this)
}

var (
	Interface Type
	Char Type
	UChar Type
	Boolean Type
	Int Type
	UInt Type
	Long Type
	ULong Type
	Int64 Type
	UInt64 Type
	Enum Type
	Flags Type
	Float Type
	Double Type
	String Type
	Pointer Type
	Boxed Type
	Param Type
	GObject Type
	GType Type
	Variant Type
	GoInterface Type
)

func init() {
	C.g_type_init()

	Interface = Type(C._g_type_interface())
	Char = Type(C._g_type_char())
	UChar = Type(C._g_type_uchar())
	Boolean = Type(C._g_type_boolean())
	Int = Type(C._g_type_int())
	UInt = Type(C._g_type_uint())
	Long = Type(C._g_type_long())
	ULong = Type(C._g_type_ulong())
	Int64 = Type(C._g_type_int64())
	UInt64 = Type(C._g_type_uint64())
	Enum = Type(C._g_type_enum())
	Flags = Type(C._g_type_flags())
	Float = Type(C._g_type_float())
	Double = Type(C._g_type_double())
	String = Type(C._g_type_string())
	Pointer = Type(C._g_type_pointer())
	Boxed = Type(C._g_type_boxed())
	Param = Type(C._g_type_param())
	GObject = Type(C._g_type_object())
	GType = Type(C._g_type_gtype())
	Variant = Type(C._g_type_variant())
	GoInterface = Type(C._g_type_go_interface())
}

// Every GObject generated by this generator implements this interface
// and it must work even if the receiver is a nil value
type StaticTyper interface {
	GetStaticType() Type
}

//--------------------------------------------------------------
// Value
//--------------------------------------------------------------

func (this *Value) asC() *C.GValue {
	return (*C.GValue)(unsafe.Pointer(this))
}

// g_value_init
func (this *Value) Init(t Type) {
	C.g_value_init(this.asC(), t.asC())
}

// g_value_copy
func (this *Value) Set(src *Value) {
	C.g_value_copy(src.asC(), this.asC())
}

// g_value_reset
func (this *Value) Reset() {
	C.g_value_reset(this.asC())
}

// g_value_unset
func (this *Value) Unset() {
	C.g_value_unset(this.asC())
}

// G_VALUE_TYPE
func (this *Value) GetType() Type {
	return Type(C._g_value_type(this.asC()))
}

// g_value_type_compatible
func ValueTypeCompatible(src, dst Type) bool {
	return C.g_value_type_compatible(src.asC(), dst.asC()) != 0
}

// g_value_type_transformable
func ValueTypeTransformable(src, dst Type) bool {
	return C.g_value_type_transformable(src.asC(), dst.asC()) != 0
}

// g_value_transform
func (this *Value) Transform(src *Value) bool {
	return C.g_value_transform(src.asC(), this.asC()) != 0
}

// g_value_get_boolean
func (this *Value) GetBool() bool {
	return C.g_value_get_boolean(this.asC()) != 0
}

// g_value_set_boolean
func (this *Value) SetBool(v bool) {
	C.g_value_set_boolean(this.asC(), _GoBoolToCBool(v))
}

// g_value_get_int64
func (this *Value) GetInt() int64 {
	return int64(C.g_value_get_int64(this.asC()))
}

// g_value_set_int64
func (this *Value) SetInt(v int64) {
	C.g_value_set_int64(this.asC(), C.int64_t(v))
}

// g_value_get_uint64
func (this *Value) GetUint() uint64 {
	return uint64(C.g_value_get_uint64(this.asC()))
}

// g_value_set_uint64
func (this *Value) SetUint(v uint64) {
	C.g_value_set_uint64(this.asC(), C.uint64_t(v))
}

// g_value_get_double
func (this *Value) GetFloat() float64 {
	return float64(C.g_value_get_double(this.asC()))
}

// g_value_set_double
func (this *Value) SetFloat(v float64) {
	C.g_value_set_double(this.asC(), C.double(v))
}

// g_value_get_string
func (this *Value) GetString() string {
	return C.GoString(C.g_value_get_string(this.asC()))
}

// g_value_take_string
func (this *Value) SetString(v string) {
	cstr := C.CString(v)
	C.g_value_take_string(this.asC(), cstr)
	// not freeing, because GValue takes the ownership
}

// g_value_get_object
func (this *Value) GetObject() unsafe.Pointer {
	return unsafe.Pointer(C.g_value_get_object(this.asC()))
}

// g_value_take_object
func (this *Value) SetObject(x unsafe.Pointer) {
	C.g_value_take_object(this.asC(), x)
}

// g_value_get_boxed
func (this *Value) GetBoxed() unsafe.Pointer {
	return C.g_value_get_boxed(this.asC())
}

// g_value_take_boxed
func (this *Value) SetBoxed(x unsafe.Pointer) {
	count := _boxedcache[x]
	_boxedcache[x] = count + 1
	C.g_value_take_boxed(this.asC(), x)
}

//--------------------------------------------------------------
// A giant glue for connecting GType and Go's reflection
//--------------------------------------------------------------

var statictyper = reflect.TypeOf((*StaticTyper)(nil)).Elem()
var objectlike = reflect.TypeOf((*ObjectLike)(nil)).Elem()

func (this *Value) SetGoValue(v reflect.Value) {
	valuetype := this.GetType()
	var src Value

	if valuetype == GoInterface {
		// special case
		x := v.Interface()
		this.SetBoxed(unsafe.Pointer(&x))
		return
	}

	transform := func() {
		ok := this.Transform(&src)
		if !ok {
			panic("Go value is not transformable to " + valuetype.String())
		}
	}

	switch v.Kind() {
	case reflect.Bool:
		src.Init(Boolean)
		src.SetBool(v.Bool())
		transform()
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		src.Init(Int64)
		src.SetInt(v.Int())
		transform()
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		src.Init(UInt64)
		src.SetUint(v.Uint())
		transform()
	case reflect.Float32, reflect.Float64:
		src.Init(Double)
		src.SetFloat(v.Float())
		transform()
	case reflect.String:
		src.Init(String)
		src.SetString(v.String())
		transform()
		src.Unset()
	case reflect.Ptr:
		gotype := v.Type()
		src.Init(GObject)
		if gotype.Implements(objectlike) {
			obj, ok := v.Interface().(ObjectLike)
			if !ok {
				panic(gotype.String() + " is not transformable to GValue")
			}

			src.SetObject(unsafe.Pointer(obj.InheritedFromGObject()))
			transform()
		}
		src.Unset()
	}
}

var CairoMarshaler func(*Value, reflect.Type) (reflect.Value, bool)

func (this *Value) GetGoValue(t reflect.Type) reflect.Value {
	var out reflect.Value
	var dst Value

	if (this.GetType() == GoInterface) {
		return reflect.ValueOf(*(*interface{})(this.GetBoxed()))
	}

	transform := func() {
		ok := dst.Transform(this)
		if !ok {
			panic("GValue is not transformable to " + t.String())
		}
	}

	switch t.Kind() {
	case reflect.Bool:
		dst.Init(Boolean)
		transform()
		out = reflect.New(t).Elem()
		out.SetBool(dst.GetBool())
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		dst.Init(Int64)
		transform()
		out = reflect.New(t).Elem()
		out.SetInt(dst.GetInt())
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		dst.Init(UInt64)
		transform()
		out = reflect.New(t).Elem()
		out.SetUint(dst.GetUint())
	case reflect.Float32, reflect.Float64:
		dst.Init(Double)
		transform()
		out = reflect.New(t).Elem()
		out.SetFloat(dst.GetFloat())
	case reflect.String:
		dst.Init(String)
		transform()
		out = reflect.New(t).Elem()
		out.SetString(dst.GetString())
		dst.Unset() // need to clean up in this case
	case reflect.Ptr:
		if t.Implements(objectlike) {
			// at this point we're sure that this is a pointer to the ObjectLike
			out = reflect.New(t.Elem())
			st, ok := out.Interface().(StaticTyper)
			if !ok {
				panic("ObjectLike type must implement StaticTyper as well")
			}
			dst.Init(st.GetStaticType())
			transform()
			obj := (*Object)(unsafe.Pointer(out.Pointer()))
			obj.C = dst.GetObject()
			C.g_object_ref_sink((*C.GObject)(obj.C))
			set_object_finalizer(obj)
		} else {
			// cairo marshaler hook
			if CairoMarshaler != nil {
				var ok bool
				out, ok = CairoMarshaler(this, t)
				if ok {
					break
				}
			}

			// must be a struct then
			out = reflect.New(t)
			*(*unsafe.Pointer)(unsafe.Pointer(out.Pointer())) = this.GetBoxed()
			out = out.Elem()
		}
	}
	return out
}

func (this *Value) SetGoInterface(v interface{}) {
	this.SetGoValue(reflect.ValueOf(v))
}

func (this *Value) GetGoInterface(v interface{}) {
	vp := reflect.ValueOf(v)
	if vp.Kind() != reflect.Ptr {
		panic("a pointer to value is expected for Value.GetGoInterface")
	}
	vp.Elem().Set(this.GetGoValue(vp.Type().Elem()))
}

