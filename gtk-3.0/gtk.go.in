package gtk

/*
[<.CommonIncludes>]

[<.GType>]

[<.CUtils>]
[<.CForwardDeclarations>]

[<.GObjectRefUnref>]
[<.GFree>]
[<.GErrorFree>]

extern GtkWidget *gtk_message_dialog_new(GtkWindow*, GtkDialogFlags, GtkMessageType, GtkButtonsType, const char *msg);

#cgo pkg-config: gtk+-3.0
*/
import "C"
import "unsafe"
import "runtime"
import "errors"
import "fmt"

// package dependencies
import (
	"gobject/gdk-3.0"
	"gobject/gdkpixbuf-2.0"
	"gobject/gobject-2.0"
	"gobject/gio-2.0"
	"gobject/cairo-1.0"
	"gobject/pango-1.0"
	"gobject/atk-1.0"
	"gobject/glib-2.0"
)

[<.GoUtils>]

[<.GoBindings>]

//----------------------------------------------------------------------------
// Custom utils
//----------------------------------------------------------------------------

func for_pairs(slice []interface{}, closure func(key, value interface{})) {
	if len(slice) & 1 != 0 {
		panic("the number of arguments must be even (key/value pairs)")
	}

	var key interface{}
	for i, value := range slice {
		if i & 1 == 0 {
			key = value
		} else {
			closure(key, value)
		}
	}
}

func panic_if_type_is_not_ok(ok bool, expected_type string, value interface{}) {
	if !ok {
		msg := fmt.Sprintf("expected type for argument: %s, got: %T",
			expected_type, value)
		panic(msg)
	}
}

//----------------------------------------------------------------------------
// TreeViewColumn
//----------------------------------------------------------------------------

func NewTreeViewColumnWithAttributes(title string, renderer CellRendererLike, attrs ...interface{}) *TreeViewColumn {
	c := NewTreeViewColumn()
	c.SetTitle(title)
	c.PackStart(renderer, true)
	for_pairs(attrs, func(key, value interface{}) {
		attr_name, ok := key.(string)
		panic_if_type_is_not_ok(ok, "string", key)
		attr_col, ok := value.(int)
		panic_if_type_is_not_ok(ok, "int", value)

		c.AddAttribute(renderer, attr_name, attr_col)
	})
	return c
}

//----------------------------------------------------------------------------
// Dialog
//----------------------------------------------------------------------------

func NewDialogWithButtons(title string, parent *Window, flags DialogFlags, buttons ...interface{}) *Dialog {
	dialog := NewDialog()

	if title != "" {
		dialog.SetTitle(title)
	}

	if parent != nil {
		dialog.SetTransientFor(parent)
	}

	if flags & DialogFlagsModal != 0 {
		dialog.SetModal(true)
	}

	if flags & DialogFlagsDestroyWithParent != 0 {
		dialog.SetDestroyWithParent(true)
	}

	for_pairs(buttons, func(key, value interface{}) {
		text, ok := key.(string)
		panic_if_type_is_not_ok(ok, "string", key)
		response, ok := value.(ResponseType)
		panic_if_type_is_not_ok(ok, "ResponseType", value)
		dialog.AddButton(text, response)
	})

	return dialog
}

func (this *Dialog) AddButton(text string, response ResponseType) *Widget {
	return this._AddButton(text, int(response))
}

//----------------------------------------------------------------------------
// MessageDialog
//----------------------------------------------------------------------------

func NewMessageDialogWithMarkup(parent0 WindowLike, flags0 DialogFlags, type0 MessageType,
		buttons0 ButtonsType, format string, args ...interface{}) *MessageDialog {
	var parent1 *C.GtkWindow
	var flags1 C.GtkDialogFlags
	var type1 C.GtkMessageType
	var buttons1 C.GtkButtonsType
	if parent0 != nil {
		parent1 = parent0.InheritedFromGtkWindow()
	}
	flags1 = C.GtkDialogFlags(flags0)
	type1 = C.GtkMessageType(type0)
	buttons1 = C.GtkButtonsType(buttons0)
	ret1 := C.gtk_message_dialog_new(parent1, flags1, type1, buttons1, nil)
	var ret2 *MessageDialog
	ret2 = (*MessageDialog)(_GObjectGrab(unsafe.Pointer(ret1)))
	ret2.SetMarkup(fmt.Sprintf(format, args...))
	return ret2
}

//----------------------------------------------------------------------------
// TreeStore
//----------------------------------------------------------------------------

func NewTreeStore(types ...gobject.Type) *TreeStore {
	return _NewTreeStore(types)
}

func (this *TreeStore) Append(parent *TreeIter, values ...interface{}) TreeIter {
	iter := this._Append(parent)
	for i, v := range values {
		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(i))
		gvalue.SetGoInterface(v)
		this.SetValue(&iter, i, &gvalue)
		gvalue.Unset()
	}
	return iter
}

func (this *TreeStore) Set(iter *TreeIter, columnspecs ...interface{}) {
	for_pairs(columnspecs, func(key, value interface{}) {
		column, ok := key.(int)
		panic_if_type_is_not_ok(ok, "int", key)

		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(column))
		gvalue.SetGoInterface(value)
		this.SetValue(iter, column, &gvalue)
		gvalue.Unset()
	})
}

//----------------------------------------------------------------------------
// ListStore
//----------------------------------------------------------------------------

func NewListStore(types ...gobject.Type) *ListStore {
	return _NewListStore(types)
}

func (this *ListStore) Append(values ...interface{}) TreeIter {
	iter := this._Append()
	for i, v := range values {
		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(i))
		gvalue.SetGoInterface(v)
		this.SetValue(&iter, i, &gvalue)
		gvalue.Unset()
	}
	return iter
}

func (this *ListStore) Set(iter *TreeIter, columnspecs ...interface{}) {
	for_pairs(columnspecs, func(key, value interface{}) {
		column, ok := key.(int)
		panic_if_type_is_not_ok(ok, "int", key)

		var gvalue gobject.Value
		gvalue.Init(this.GetColumnType(column))
		gvalue.SetGoInterface(value)
		this.SetValue(iter, column, &gvalue)
		gvalue.Unset()
	})
}

//----------------------------------------------------------------------------
// TreeModelImpl
//----------------------------------------------------------------------------

func (this *TreeModelImpl) Get(iter *TreeIter, columnspecs ...interface{}) {
	for_pairs(columnspecs, func(key, value interface{}) {
		column, ok := key.(int)
		panic_if_type_is_not_ok(ok, "int", key)
		gvalue := this.GetValue(iter, column)
		gvalue.GetGoInterface(value)
		gvalue.Unset()
	})
}
