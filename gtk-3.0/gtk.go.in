package gtk

/*
[<.CommonIncludes>]

[<.GType>]

[<.CForwardDeclarations>]

[<.GObjectRefUnref>]
[<.GFree>]
[<.GErrorFree>]

#cgo pkg-config: gtk+-3.0
*/
import "C"
import "unsafe"
import "runtime"
import "errors"

// package dependencies
import (
	"gobject/gdk-3.0"
	"gobject/gdkpixbuf-2.0"
	"gobject/gobject-2.0"
	"gobject/gio-2.0"
	"gobject/cairo-1.0"
	"gobject/pango-1.0"
)

[<.GoUtils>]

[<.GoBindings>]

//----------------------------------------------------------------------------
// Dialog
//----------------------------------------------------------------------------

func NewDialogWithButtons(title string, parent *Window, flags DialogFlags, buttons ...interface{}) *Dialog {
	dialog := NewDialog()

	if title != "" {
		dialog.SetTitle(title)
	}

	if parent != nil {
		dialog.SetTransientFor(parent)
	}

	if flags & DialogFlagsModal != 0 {
		dialog.SetModal(true)
	}

	if flags & DialogFlagsDestroyWithParent != 0 {
		dialog.SetDestroyWithParent(true)
	}

	if len(buttons) == 0 {
		return dialog
	}

	if len(buttons) & 1 != 0 {
		panic("the number of button specs should be even (name/response pairs)")
	}

	var ok bool
	var text string
	var response ResponseType
	for i, spec := range buttons {
		if i & 1 == 0 {
			text, ok = spec.(string)
			if !ok {
				panic("non-string button text")
			}
		} else {
			response, ok = spec.(ResponseType)
			if !ok {
				panic("non-ResponseType button response")
			}
			dialog.AddButton(text, int(response))
		}
	}

	return dialog
}